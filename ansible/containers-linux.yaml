---


- name: Deploy Linux containers
  hosts: default
  become: false
  tags: container
  tasks:
    - name: Create Alpine containers
      lxd_container:
        url: "unix:/var/lib/incus/unix.socket"
        name: "{{ item.name }}"
        state: started
        devices:
          eth0:
            type: nic
            name: eth0
            nictype: bridged
            parent: lxdbr0
            ipv4.address: "{{ item.ip }}"
            hwaddr: "{{ item.mac }}"
        ignore_volatile_options: false
        source:
          type: image
          mode: pull
          server: https://images.linuxcontainers.org
          protocol: simplestreams
          alias: alpine/3.21
        profiles: ["default"]
        wait_for_ipv4_addresses: true
      with_items:
        - name: hosta
          mac: 00:16:3e:ee:00:52
          ip: 192.0.2.52
    - name: Check Python3 in the container
      delegate_to: hosta
      raw: python3 /dev/null
      register: python3_check
      failed_when: false
      changed_when: false

    - name: Install Python 3 into Alpine container
      delegate_to: hosta
      raw: apk add python3
      when: python3_check.rc != 0
    - name: Upgrade everything in the container
      delegate_to: hosta
      apk:
        update_cache: yes
        upgrade: yes
      ignore_errors: yes  # If container is not connected to the internet

    - name: Disable cron in the container
      delegate_to: hosta
      service:
        name: crond
        enabled: no
        state: stopped

    - name: Install packages into container
      delegate_to: hosta
      apk:
        name:
          - bash
          - bind-tools
          - busybox-extras
          - curl
          - iproute2
          - iputils
          - mtr
          - net-tools
          - openssl
          - procps
          - tcpdump
          - tcptraceroute
          - wget
          - vim
          - ed
          - nano
          - dhcpcd
          - openresolv
          - tcpdump
          - termshark

    - name: Clone Alpine containers
      lxd_container:
        url: "unix:/var/lib/incus/unix.socket"
        name: "{{ item.name }}"
        ignore_volatile_options: false
        devices:
          eth0:
            type: nic
            name: eth0
            nictype: bridged
            parent: lxdbr0
            ipv4.address: "{{ item.ip }}"
            hwaddr: "{{ item.mac }}"
        state: started
        source:
          type: copy
          source: hosta
        profiles: ["default"]
        wait_for_ipv4_addresses: true
      with_items:
        - name: dns
          mac: 00:16:3e:ee:00:53
          ip: 192.0.2.53
        - name: www
          mac: 00:16:3e:ee:00:54
          ip: 192.0.2.54
        - name: localweb
          mac: 00:16:3e:ee:00:55
          ip: 192.0.2.55
    - name: Attach networks to the containers
      command:
        cmd: "incus network attach {{ item.network }} {{ item.container }} {{ item.ifname }} {{ item.ifname }}"
      register: net_attach
      failed_when: net_attach.rc not in [0, 1]
      changed_when: net_attach.rc == 0
      with_items:
         - network: hosta-to-cpe
           container: hosta
           ifname: to_cpe
         - network: bb1-to-dc
           container: dns
           ifname: to_bb1
         - network: transit-to-www
           container: www
           ifname: to_transit
         - network: bb1-to-dc
           container: localweb
           ifname: to_bb1

- name: Provision www server
  hosts: www
  tags: container
  tasks:
    - name: Install nginx
      apk:
        name: nginx
    - name: Setup config file
      copy:
        src: nginx-ip.conf
        dest: /etc/nginx/http.d/default.conf
      notify: reload nginx
    - name: enable nginx
      service:
        name: nginx
        enabled: true
        state: started
    - name: configure IP addresses
      blockinfile:
        path: /etc/network/interfaces
        block: |
          auto to_transit
          iface to_transit
            use link
            use static
            address 10.0.87.7/24
            gateway 10.0.87.8
            address 3fff:99:0:78::7/64
            gateway 3fff:99:0:78::8
    - name: disable eth0
      lineinfile:
        path: /etc/network/interfaces
        line: "#auto eth0"
        regexp: '^#?auto eth0'
  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded

- name: Provision localweb server
  hosts: localweb
  tags: container
  tasks:
    - name: Install nginx
      apk:
        name: nginx
    - name: Setup config file
      copy:
        src: nginx-ip.conf
        dest: /etc/nginx/http.d/default.conf
      notify: reload nginx
    - name: enable nginx
      service:
        name: nginx
        enabled: true
        state: started
    - name: configure IP addresses
      blockinfile:
        path: /etc/network/interfaces
        block: |
          auto to_bb1
          iface to_bb1
            use link
            use static
            address 10.1.100.11/24
            gateway 10.1.100.1
            nameserver 10.1.100.14
            address 3fff:100:0:3::b/64
            gateway 3fff:100:0:3::1
            up echo nameserver 10.1.100.14 | resolvconf -x -a $IFACE
    - name: disable eth0
      lineinfile:
        path: /etc/network/interfaces
        line: "#auto eth0"
        regexp: '^#?auto eth0'
  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded


- name: Provision DNS server
  hosts: dns
  tags: container
  tasks:
    - name: Install bind
      apk:
        name: bind
    - name: Setup config files
      copy:
        src: "bind/{{ item }}"
        dest: "/etc/bind/{{ item }}"
      notify: reload bind
      with_items:
        - named.conf
        - example.zone
    - name: enable bind
      service:
        name: named
        enabled: true
        state: started
    - name: configure IP addresses
      blockinfile:
        path: /etc/network/interfaces
        block: |
          auto to_bb1
          iface to_bb1
            use link
            use static
            address 10.1.100.14/24
            gateway 10.1.100.1
            nameserver 10.1.100.14
            address 3fff:100:0:3::e/64
            gateway 3fff:100:0:3::1
            up echo nameserver 10.1.100.14 | resolvconf -x -a $IFACE
  handlers:
    - name: reload bind
      service:
        name: named
        state: reloaded

- name: Provision hosta
  hosts: hosta
  tags: container
  tasks:
    - name: configure IP addresses
      blockinfile:
        path: /etc/network/interfaces
        block: |
          auto to_cpe
          iface to_cpe inet dhcp
    - name: make sure eth0 does not work
      lineinfile:
        path: /etc/network/interfaces
        line: "iface eth0 inet manual"
        regexp: '^iface eth0'
    - name: make sure eth0 does not work
      lineinfile:
        path: /etc/network/interfaces
        line: " up ip link set dev eth0 down"
        insertafter: '^iface eth0'
...

